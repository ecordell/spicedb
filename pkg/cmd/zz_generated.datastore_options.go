// Code generated by github.com/ecordell/optgen. DO NOT EDIT.
package cmd

import "time"

type DatastoreConfigOption func(d *DatastoreConfig)

// NewDatastoreConfigWithOptions creates a new DatastoreConfig with the passed in options set
func NewDatastoreConfigWithOptions(opts ...DatastoreConfigOption) *DatastoreConfig {
	d := &DatastoreConfig{}
	for _, o := range opts {
		o(d)
	}
	return d
}

// DatastoreConfigWithOptions configures an existing DatastoreConfig with the passed in options set
func DatastoreConfigWithOptions(d *DatastoreConfig, opts ...DatastoreConfigOption) *DatastoreConfig {
	for _, o := range opts {
		o(d)
	}
	return d
}

// WithEngine returns an option that can set Engine on a DatastoreConfig
func WithEngine(engine string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.Engine = engine
	}
}

// WithURI returns an option that can set URI on a DatastoreConfig
func WithURI(uRI string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.URI = uRI
	}
}

// WithGCWindow returns an option that can set GCWindow on a DatastoreConfig
func WithGCWindow(gCWindow time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.GCWindow = gCWindow
	}
}

// WithRevisionQuantization returns an option that can set RevisionQuantization on a DatastoreConfig
func WithRevisionQuantization(revisionQuantization time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.RevisionQuantization = revisionQuantization
	}
}

// WithMaxIdleTime returns an option that can set MaxIdleTime on a DatastoreConfig
func WithMaxIdleTime(maxIdleTime time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.MaxIdleTime = maxIdleTime
	}
}

// WithMaxLifetime returns an option that can set MaxLifetime on a DatastoreConfig
func WithMaxLifetime(maxLifetime time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.MaxLifetime = maxLifetime
	}
}

// WithMaxOpenConns returns an option that can set MaxOpenConns on a DatastoreConfig
func WithMaxOpenConns(maxOpenConns int) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.MaxOpenConns = maxOpenConns
	}
}

// WithMinOpenConns returns an option that can set MinOpenConns on a DatastoreConfig
func WithMinOpenConns(minOpenConns int) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.MinOpenConns = minOpenConns
	}
}

// WithSplitQuerySize returns an option that can set SplitQuerySize on a DatastoreConfig
func WithSplitQuerySize(splitQuerySize string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.SplitQuerySize = splitQuerySize
	}
}

// WithReadOnly returns an option that can set ReadOnly on a DatastoreConfig
func WithReadOnly(readOnly bool) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.ReadOnly = readOnly
	}
}

// WithBootstrapFiles returns an option that can append BootstrapFiless to DatastoreConfig.BootstrapFiles
func WithBootstrapFiles(bootstrapFiles string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.BootstrapFiles = append(d.BootstrapFiles, bootstrapFiles)
	}
}

// SetBootstrapFiles returns an option that can set BootstrapFiles on a DatastoreConfig
func SetBootstrapFiles(bootstrapFiles []string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.BootstrapFiles = bootstrapFiles
	}
}

// WithBootstrapOverwrite returns an option that can set BootstrapOverwrite on a DatastoreConfig
func WithBootstrapOverwrite(bootstrapOverwrite bool) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.BootstrapOverwrite = bootstrapOverwrite
	}
}

// WithRequestHedgingEnabled returns an option that can set RequestHedgingEnabled on a DatastoreConfig
func WithRequestHedgingEnabled(requestHedgingEnabled bool) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.RequestHedgingEnabled = requestHedgingEnabled
	}
}

// WithRequestHedgingInitialSlowValue returns an option that can set RequestHedgingInitialSlowValue on a DatastoreConfig
func WithRequestHedgingInitialSlowValue(requestHedgingInitialSlowValue time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.RequestHedgingInitialSlowValue = requestHedgingInitialSlowValue
	}
}

// WithRequestHedgingMaxRequests returns an option that can set RequestHedgingMaxRequests on a DatastoreConfig
func WithRequestHedgingMaxRequests(requestHedgingMaxRequests uint64) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.RequestHedgingMaxRequests = requestHedgingMaxRequests
	}
}

// WithRequestHedgingQuantile returns an option that can set RequestHedgingQuantile on a DatastoreConfig
func WithRequestHedgingQuantile(requestHedgingQuantile float64) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.RequestHedgingQuantile = requestHedgingQuantile
	}
}

// WithFollowerReadDelay returns an option that can set FollowerReadDelay on a DatastoreConfig
func WithFollowerReadDelay(followerReadDelay time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.FollowerReadDelay = followerReadDelay
	}
}

// WithMaxRetries returns an option that can set MaxRetries on a DatastoreConfig
func WithMaxRetries(maxRetries int) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.MaxRetries = maxRetries
	}
}

// WithOverlapKey returns an option that can set OverlapKey on a DatastoreConfig
func WithOverlapKey(overlapKey string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.OverlapKey = overlapKey
	}
}

// WithOverlapStrategy returns an option that can set OverlapStrategy on a DatastoreConfig
func WithOverlapStrategy(overlapStrategy string) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.OverlapStrategy = overlapStrategy
	}
}

// WithHealthCheckPeriod returns an option that can set HealthCheckPeriod on a DatastoreConfig
func WithHealthCheckPeriod(healthCheckPeriod time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.HealthCheckPeriod = healthCheckPeriod
	}
}

// WithGCInterval returns an option that can set GCInterval on a DatastoreConfig
func WithGCInterval(gCInterval time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.GCInterval = gCInterval
	}
}

// WithGCMaxOperationTime returns an option that can set GCMaxOperationTime on a DatastoreConfig
func WithGCMaxOperationTime(gCMaxOperationTime time.Duration) DatastoreConfigOption {
	return func(d *DatastoreConfig) {
		d.GCMaxOperationTime = gCMaxOperationTime
	}
}
